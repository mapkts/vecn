var searchIndex = JSON.parse('{\
"vecn":{"doc":"Crates.io Docs.rs MIT licensed Build Status","t":[23],"n":["vector"],"q":["vecn"],"d":["Macro that transforms user-defined structs into general …"],"i":[0],"f":[null],"p":[]},\
"vectory":{"doc":"","tn":["Vec2","LANES","new","splat","unit_0","unit_1","as_slice","as_mut_slice","sum","product","dot","length_squared","length","length_recip","distance_squared","distance","min","max","min_elem","max_elem","map","apply","abs","normalize","clamp","is_nan","Vec3","x","y","z","LANES","new","splat","unit_x","unit_y","unit_z","as_slice","as_mut_slice","sum","product","dot","length_squared","length","length_recip","distance_squared","distance","min","max","min_elem","max_elem","map","apply","abs","normalize","clamp","cross","is_nan","Vec4","x","y","z","w","LANES","new","splat","unit_x","unit_y","unit_z","unit_w","as_slice","as_mut_slice","sum","product","dot","length_squared","length","length_recip","distance_squared","distance","min","max","min_elem","max_elem","map","apply","abs","normalize","clamp","is_nan","V2xu8","0","1","LANES","ZERO","ONE","new","splat","unit_0","unit_1","as_slice","as_mut_slice","sum","product","dot","length_squared","min","max","min_elem","max_elem","apply","clamp","V3xi32","x","y","z","LANES","ZERO","ONE","new","splat","unit_x","unit_y","unit_z","as_slice","as_mut_slice","sum","product","dot","length_squared","length","length_recip","distance_squared","distance","min","max","min_elem","max_elem","apply","abs","normalize","clamp","cross","is_nan","V4xf64","x","y","z","w","LANES","ZERO","ONE","new","splat","unit_x","unit_y","unit_z","unit_w","as_slice","as_mut_slice","sum","product","dot","length_squared","length","length_recip","distance_squared","distance","min","max","min_elem","max_elem","apply","abs","normalize","clamp","is_nan","from","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","clone","clone","clone","clone","clone","clone","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","div","div","div","div","div","div","div","div","div","div","div","div","sub","sub","sub","sub","sub","sub","add","add","add","add","add","add","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","neg","neg","neg","neg","neg","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut"],"q":["vectoryd":["A generic 2D vector type that represented by tuple struct.","The number of lanes in this vector.","Constructs a new vector with the given values.","Construct a new vector by setting each of its element to …","Returns a unit vector which points along the <code>0</code> axis.","Returns a unit vector which points along the <code>1</code> axis.","Views this vector as an immutable slice.","Views this vector as a mutable slice.","Returns the sum of all elements in this vector.","Returns the product of all elements in this vector.","Returns the dot product between <code>self</code> and <code>other</code>.","Returns the sqaured length of this vector.","Returns the length of this vector.","Returns the reciprocal of its length.","Returns the squared euclidean distance between two points.","Returns the euclidean distance between two points.","Returns a vector containing the mininum values for each …","Returns a vector containing the maximun values for each …","Returns the smallest element in this vector.","Returns the largest element in this vector.","Returns an vector of the same shape as <code>self</code>, with …","Applies the function <code>f</code> to each element in order, in-place.","Computes the absolute value of self.","Returns a normalized <code>self</code> whose length is equal to 1.","Restricts each element in <code>self</code> to a certain interval …","Returns <code>true</code> if any elements are <code>NaN</code>.","A generic 3D vector type that represented by named struct.","","","","The number of lanes in this vector.","Constructs a new vector with the given values.","Construct a new vector by setting each of its element to …","Returns a unit vector which points along the <code>x</code> axis.","Returns a unit vector which points along the <code>y</code> axis.","Returns a unit vector which points along the <code>z</code> axis.","Views this vector as an immutable slice.","Views this vector as a mutable slice.","Returns the sum of all elements in this vector.","Returns the product of all elements in this vector.","Returns the dot product between <code>self</code> and <code>other</code>.","Returns the sqaured length of this vector.","Returns the length of this vector.","Returns the reciprocal of its length.","Returns the squared euclidean distance between two points.","Returns the euclidean distance between two points.","Returns a vector containing the mininum values for each …","Returns a vector containing the maximun values for each …","Returns the smallest element in this vector.","Returns the largest element in this vector.","Returns an vector of the same shape as <code>self</code>, with …","Applies the function <code>f</code> to each element in order, in-place.","Computes the absolute value of self.","Returns a normalized <code>self</code> whose length is equal to 1.","Restricts each element in <code>self</code> to a certain interval …","Returns the cross product between <code>self</code> and <code>other</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","A generic 4D vector type that represented by named struct.","","","","","The number of lanes in this vector.","Constructs a new vector with the given values.","Construct a new vector by setting each of its element to …","Returns a unit vector which points along the <code>x</code> axis.","Returns a unit vector which points along the <code>y</code> axis.","Returns a unit vector which points along the <code>z</code> axis.","Returns a unit vector which points along the <code>w</code> axis.","Views this vector as an immutable slice.","Views this vector as a mutable slice.","Returns the sum of all elements in this vector.","Returns the product of all elements in this vector.","Returns the dot product between <code>self</code> and <code>other</code>.","Returns the sqaured length of this vector.","Returns the length of this vector.","Returns the reciprocal of its length.","Returns the squared euclidean distance between two points.","Returns the euclidean distance between two points.","Returns a vector containing the mininum values for each …","Returns a vector containing the maximun values for each …","Returns the smallest element in this vector.","Returns the largest element in this vector.","Returns an vector of the same shape as <code>self</code>, with …","Applies the function <code>f</code> to each element in order, in-place.","Computes the absolute value of self.","Returns a normalized <code>self</code> whose length is equal to 1.","Restricts each element in <code>self</code> to a certain interval …","Returns <code>true</code> if any elements are <code>NaN</code>.","A 2D vector type with elements of type <code>u8</code>.","","","The number of lanes in this vector.","A vector with all its elements set to zero.","A vector with all its elements set to one.","Constructs a new vector with the given values.","Construct a new vector by setting each of its element to …","Returns a unit vector which points along the <code>0</code> axis.","Returns a unit vector which points along the <code>1</code> axis.","Views this vector as an immutable slice.","Views this vector as a mutable slice.","Returns the sum of all elements in this vector.","Returns the product of all elements in this vector.","Returns the dot product between <code>self</code> and <code>other</code>.","Returns the sqaured length of this vector.","Returns a vector containing the mininum values for each …","Returns a vector containing the maximun values for each …","Returns the smallest element in this vector.","Returns the largest element in this vector.","Applies the function <code>f</code> to each element in order, in-place.","Restricts each element in <code>self</code> to a certain interval …","A 3D vector type with elements of type <code>i32</code>.","","","","The number of lanes in this vector.","A vector with all its elements set to zero.","A vector with all its elements set to one.","Constructs a new vector with the given values.","Construct a new vector by setting each of its element to …","Returns a unit vector which points along the <code>x</code> axis.","Returns a unit vector which points along the <code>y</code> axis.","Returns a unit vector which points along the <code>z</code> axis.","Views this vector as an immutable slice.","Views this vector as a mutable slice.","Returns the sum of all elements in this vector.","Returns the product of all elements in this vector.","Returns the dot product between <code>self</code> and <code>other</code>.","Returns the sqaured length of this vector.","Returns the length of this vector.","Returns the reciprocal of its length.","Returns the squared euclidean distance between two points.","Returns the euclidean distance between two points.","Returns a vector containing the mininum values for each …","Returns a vector containing the maximun values for each …","Returns the smallest element in this vector.","Returns the largest element in this vector.","Applies the function <code>f</code> to each element in order, in-place.","Computes the absolute value of self.","Returns a normalized <code>self</code> whose length is equal to 1.","Restricts each element in <code>self</code> to a certain interval …","Returns the cross product between <code>self</code> and <code>other</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","A 4D vector type with elements of type <code>f64</code>.","","","","","The number of lanes in this vector.","A vector with all its elements set to zero.","A vector with all its elements set to one.","Constructs a new vector with the given values.","Construct a new vector by setting each of its element to …","Returns a unit vector which points along the <code>x</code> axis.","Returns a unit vector which points along the <code>y</code> axis.","Returns a unit vector which points along the <code>z</code> axis.","Returns a unit vector which points along the <code>w</code> axis.","Views this vector as an immutable slice.","Views this vector as a mutable slice.","Returns the sum of all elements in this vector.","Returns the product of all elements in this vector.","Returns the dot product between <code>self</code> and <code>other</code>.","Returns the sqaured length of this vector.","Returns the length of this vector.","Returns the reciprocal of its length.","Returns the squared euclidean distance between two points.","Returns the euclidean distance between two points.","Returns a vector containing the mininum values for each …","Returns a vector containing the maximun values for each …","Returns the smallest element in this vector.","Returns the largest element in this vector.","Applies the function <code>f</code> to each element in order, in-place.","Computes the absolute value of self.","Returns a normalized <code>self</code> whose length is equal to 1.","Restricts each element in <code>self</code> to a certain interval …","Returns <code>true</code> if any elements are <code>NaN</codei":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,1,1,2,2,3,3,4,4,5,5,6,6,1,1,2,2,3,3,4,4,5,5,6,6,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,1,1,2,2,3,3,4,4,5,5,6,6,1,2,3,4,5,6,1,1,2,2,3,3,4,4,5,5,6,6,1,2,3,4,5,6,1,2,3,4,5,6,1,1,2,2,3,3,4,4,5,5,6,6,1,2,3,4,5,6,1,2,3,4,5,6,1,1,2,2,3,3,4,4,5,5,6,6,1,2,3,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,1,2,2,3,3,4,4,5,5,6,6,1,1,2,2,3,3,4,4,5,5,6,6,1,2,3,4,5,6,1,2,3,4,5,6],"f":[null,null,[[]],[[]],[[],["vec2",3]],[[],["vec2",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec2",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,null,null,null,null,[[]],[[]],[[],["vec3",3]],[[],["vec3",3]],[[],["vec3",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec3",3]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,null,null,null,null,null,[[]],[[]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec4",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,null,null,null,null,null,[[["u8",15]]],[[["u8",15]]],[[],["v2xu8",3]],[[],["v2xu8",3]],[[]],[[]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[]],[[]],[[],["u8",15]],[[],["u8",15]],[[]],[[]],null,null,null,null,null,null,null,[[["f32",15]]],[[["f32",15]]],[[],["v3xi32",3]],[[],["v3xi32",3]],[[],["v3xi32",3]],[[]],[[]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[]],[[]],[[],["f32",15]],[[],["f32",15]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,null,null,null,null,null,null,null,[[["f64",15]]],[[["f64",15]]],[[],["v4xf64",3]],[[],["v4xf64",3]],[[],["v4xf64",3]],[[],["v4xf64",3]],[[]],[[]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[]],[[]],[[],["f64",15]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]]],[[]],[[]],[[["f32",15]]],[[]],[[]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["v2xu8",3]],[[],["v3xi32",3]],[[],["v4xf64",3]],[[["vec2",3]],["bool",15]],[[["vec2",3]],["bool",15]],[[["vec3",3]],["bool",15]],[[["vec3",3]],["bool",15]],[[["vec4",3]],["bool",15]],[[["vec4",3]],["bool",15]],[[["v2xu8",3]],["bool",15]],[[["v2xu8",3]],["bool",15]],[[["v3xi32",3]],["bool",15]],[[["v3xi32",3]],["bool",15]],[[["v4xf64",3]],["bool",15]],[[["v4xf64",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]]],[[]],[[["f32",15]]],[[]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]]],[[]],[[["f32",15]]],[[]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]]],[[]],[[["f32",15]]],[[]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]]],[[]],[[["f32",15]]],[[]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"Vec2"],[3,"Vec3"],[3,"Vec4"],[3,"V2xu8"],[3,"V3xi32"],[3,"V4xf64"]]}\
}');
initSearch(searchIndex);